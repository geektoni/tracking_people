#include <iostream>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <opencv/cxcore.h>

#include "utils.h"
#include "preprocessing.h"

using namespace cv;

int main(int argc, char ** argv) {

	// Parse the command line and get the
	// various arguments
	std::vector<string> arguments {"-f"};
	InputParser parser(argc, argv, arguments);
	parser.parse();

	// Open the video and check if it is correct
	// otherwise return with an error.
	VideoCapture video(parser.get("-f"));
	if (!video.isOpened())
		return -1;

	// Current frame
	Mat frame, previous, tracking_lines;

	// Foreground mask (generated by GMM)
	Mat fg;

	// result
	Mat fg_copy;

	// Background Remover object
	FindPeople bg_rem;

	// Contours;
	vector<vector<Point>> contours;
	vector<Rect> boundRect;

	while (true) {

		// Get the frame
		video >> frame;

		// If we reach the end of the video, we exit
		if (frame.empty())
			exit(0);

		// Extract people and copy the frame (prevent further modifications)
		Mat fg = bg_rem.find_people(frame);
		fg.copyTo(fg_copy);

		// Find contours and boundin boxes
		Mat drawing = bg_rem.find_contours(fg, frame, true, contours, boundRect);

		// Get the bounding rectangle centers
		vector<Point2f> current_centers = FindPeople::compute_center(boundRect);
		vector<Point2f> next_centers;

		// The tracking is performed starting from the
		// second frame.
		frame.copyTo(tracking_lines);
		if (!previous.empty())
		{
			 next_centers = bg_rem.track_people_optical(previous, frame, contours, boundRect);

			// Print a line between the points and the result
			for (int j = 0; j < current_centers.size(); ++j) {
				line(tracking_lines, current_centers[j], next_centers[j], Scalar(255,0,0), 3);
			}

		}
		frame.copyTo(previous);

		// Print everything on screen
		//namedWindow("Threshold",WINDOW_NORMAL);
		//resizeWindow("Threshold", 600, 600);
		//imshow("Threshold", fg_copy);

		namedWindow("Detect",WINDOW_NORMAL);
		resizeWindow("Detect", 600, 600);
		imshow("Detect", drawing);

		namedWindow("Tracking",WINDOW_NORMAL);
		resizeWindow("Tracking", 600, 600);
		imshow("Tracking", tracking_lines);

		waitKey(1);
	}


	return 0;
}